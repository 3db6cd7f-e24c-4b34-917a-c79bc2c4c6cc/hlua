/* automatically generated by rust-bindgen 0.55.1 */

// Generated with: bindgen 0.55.1

pub const LUA_LDIR: &'static [u8; 7usize] = b"!\\lua\\\0";
pub const LUA_CDIR: &'static [u8; 3usize] = b"!\\\0";
pub const LUA_PATH_DEFAULT: &'static [u8; 58usize] =
    b"!\\lua\\?.lua;!\\lua\\?\\init.lua;!\\?.lua;!\\?\\init.lua;.\\?.lua\0";
pub const LUA_CPATH_DEFAULT: &'static [u8; 30usize] = b"!\\?.dll;!\\loadall.dll;.\\?.dll\0";
pub const LUA_DIRSEP: &'static [u8; 2usize] = b"\\\0";
pub const LUA_ENV: &'static [u8; 5usize] = b"_ENV\0";
pub const LUA_IDSIZE: i32 = 60;
pub const LUAI_MAXSHORTLEN: i32 = 40;
pub const LUAI_BITSINT: i32 = 32;
pub const LUAI_MAXSTACK: i32 = 1000000;
pub const LUAI_FIRSTPSEUDOIDX: i32 = -1001000;
pub const LUA_NUMBER_SCAN: &'static [u8; 4usize] = b"%lf\0";
pub const LUA_NUMBER_FMT: &'static [u8; 6usize] = b"%.14g\0";
pub const LUAI_MAXNUMBER2STR: i32 = 32;
pub const LUA_IEEEENDIAN: i32 = 0;
pub const LUA_VERSION_MAJOR: &'static [u8; 2usize] = b"5\0";
pub const LUA_VERSION_MINOR: &'static [u8; 2usize] = b"2\0";
pub const LUA_VERSION_NUM: i32 = 502;
pub const LUA_VERSION_RELEASE: &'static [u8; 2usize] = b"4\0";
pub const LUA_VERSION: &'static [u8; 8usize] = b"Lua 5.2\0";
pub const LUA_RELEASE: &'static [u8; 10usize] = b"Lua 5.2.4\0";
pub const LUA_COPYRIGHT: &'static [u8; 52usize] =
    b"Lua 5.2.4  Copyright (C) 1994-2015 Lua.org, PUC-Rio\0";
pub const LUA_AUTHORS: &'static [u8; 48usize] =
    b"R. Ierusalimschy, L. H. de Figueiredo, W. Celes\0";
pub const LUA_SIGNATURE: &'static [u8; 5usize] = b"\x1BLua\0";
pub const LUA_MULTRET: i32 = -1;
pub const LUA_REGISTRYINDEX: i32 = -1001000;
pub const LUA_OK: i32 = 0;
pub const LUA_YIELD: i32 = 1;
pub const LUA_ERRRUN: i32 = 2;
pub const LUA_ERRSYNTAX: i32 = 3;
pub const LUA_ERRMEM: i32 = 4;
pub const LUA_ERRGCMM: i32 = 5;
pub const LUA_ERRERR: i32 = 6;
pub const LUA_TNONE: i32 = -1;
pub const LUA_TNIL: i32 = 0;
pub const LUA_TBOOLEAN: i32 = 1;
pub const LUA_TLIGHTUSERDATA: i32 = 2;
pub const LUA_TNUMBER: i32 = 3;
pub const LUA_TSTRING: i32 = 4;
pub const LUA_TTABLE: i32 = 5;
pub const LUA_TFUNCTION: i32 = 6;
pub const LUA_TUSERDATA: i32 = 7;
pub const LUA_TTHREAD: i32 = 8;
pub const LUA_NUMTAGS: i32 = 9;
pub const LUA_MINSTACK: i32 = 20;
pub const LUA_RIDX_MAINTHREAD: i32 = 1;
pub const LUA_RIDX_GLOBALS: i32 = 2;
pub const LUA_RIDX_LAST: i32 = 2;
pub const LUA_OPADD: i32 = 0;
pub const LUA_OPSUB: i32 = 1;
pub const LUA_OPMUL: i32 = 2;
pub const LUA_OPDIV: i32 = 3;
pub const LUA_OPMOD: i32 = 4;
pub const LUA_OPPOW: i32 = 5;
pub const LUA_OPUNM: i32 = 6;
pub const LUA_OPEQ: i32 = 0;
pub const LUA_OPLT: i32 = 1;
pub const LUA_OPLE: i32 = 2;
pub const LUA_GCSTOP: i32 = 0;
pub const LUA_GCRESTART: i32 = 1;
pub const LUA_GCCOLLECT: i32 = 2;
pub const LUA_GCCOUNT: i32 = 3;
pub const LUA_GCCOUNTB: i32 = 4;
pub const LUA_GCSTEP: i32 = 5;
pub const LUA_GCSETPAUSE: i32 = 6;
pub const LUA_GCSETSTEPMUL: i32 = 7;
pub const LUA_GCSETMAJORINC: i32 = 8;
pub const LUA_GCISRUNNING: i32 = 9;
pub const LUA_GCGEN: i32 = 10;
pub const LUA_GCINC: i32 = 11;
pub const LUA_HOOKCALL: i32 = 0;
pub const LUA_HOOKRET: i32 = 1;
pub const LUA_HOOKLINE: i32 = 2;
pub const LUA_HOOKCOUNT: i32 = 3;
pub const LUA_HOOKTAILCALL: i32 = 4;
pub const LUA_MASKCALL: i32 = 1;
pub const LUA_MASKRET: i32 = 2;
pub const LUA_MASKLINE: i32 = 4;
pub const LUA_MASKCOUNT: i32 = 8;
pub const LUA_COLIBNAME: &'static [u8; 10usize] = b"coroutine\0";
pub const LUA_TABLIBNAME: &'static [u8; 6usize] = b"table\0";
pub const LUA_IOLIBNAME: &'static [u8; 3usize] = b"io\0";
pub const LUA_OSLIBNAME: &'static [u8; 3usize] = b"os\0";
pub const LUA_STRLIBNAME: &'static [u8; 7usize] = b"string\0";
pub const LUA_BITLIBNAME: &'static [u8; 6usize] = b"bit32\0";
pub const LUA_MATHLIBNAME: &'static [u8; 5usize] = b"math\0";
pub const LUA_DBLIBNAME: &'static [u8; 6usize] = b"debug\0";
pub const LUA_LOADLIBNAME: &'static [u8; 8usize] = b"package\0";
pub const LUA_ERRFILE: i32 = 7;
pub const LUA_NOREF: i32 = -2;
pub const LUA_REFNIL: i32 = -1;
pub const LUA_FILEHANDLE: &'static [u8; 6usize] = b"FILE*\0";
pub type va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
/// <https://www.lua.org/manual/5.1/manual.html#lua_State >
pub struct lua_State {
    _unused: [u8; 0],
}
/// <https://www.lua.org/manual/5.1/manual.html#lua_CFunction >
pub type lua_CFunction =
    ::core::option::Option<unsafe extern "C" fn(L: *mut lua_State) -> libc::c_int>;
/// <https://www.lua.org/manual/5.1/manual.html#lua_Reader >
pub type lua_Reader = ::core::option::Option<
    unsafe extern "C" fn(
        L: *mut lua_State,
        ud: *mut libc::c_void,
        sz: *mut usize,
    ) -> *const libc::c_char,
>;
/// <https://www.lua.org/manual/5.1/manual.html#lua_Writer >
pub type lua_Writer = ::core::option::Option<
    unsafe extern "C" fn(
        L: *mut lua_State,
        p: *const libc::c_void,
        sz: usize,
        ud: *mut libc::c_void,
    ) -> libc::c_int,
>;
/// <https://www.lua.org/manual/5.1/manual.html#lua_Alloc >
pub type lua_Alloc = ::core::option::Option<
    unsafe extern "C" fn(
        ud: *mut libc::c_void,
        ptr: *mut libc::c_void,
        osize: usize,
        nsize: usize,
    ) -> *mut libc::c_void,
>;
/// <https://www.lua.org/manual/5.1/manual.html#lua_Number >
pub type lua_Number = f64;
/// <https://www.lua.org/manual/5.1/manual.html#lua_Integer >
pub type lua_Integer = isize;
/// <https://www.lua.org/manual/5.1/manual.html#lua_Unsigned >
pub type lua_Unsigned = libc::c_uint;
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_newstate>
    pub fn lua_newstate(f: lua_Alloc, ud: *mut libc::c_void) -> *mut lua_State;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_close>
    pub fn lua_close(L: *mut lua_State);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_newthread>
    pub fn lua_newthread(L: *mut lua_State) -> *mut lua_State;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_atpanic>
    pub fn lua_atpanic(L: *mut lua_State, panicf: lua_CFunction) -> lua_CFunction;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_version>
    pub fn lua_version(L: *mut lua_State) -> *const lua_Number;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_absindex>
    pub fn lua_absindex(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_gettop>
    pub fn lua_gettop(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_settop>
    pub fn lua_settop(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushvalue>
    pub fn lua_pushvalue(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_remove>
    pub fn lua_remove(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_insert>
    pub fn lua_insert(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_replace>
    pub fn lua_replace(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_copy>
    pub fn lua_copy(L: *mut lua_State, fromidx: libc::c_int, toidx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_checkstack>
    pub fn lua_checkstack(L: *mut lua_State, sz: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_xmove>
    pub fn lua_xmove(from: *mut lua_State, to: *mut lua_State, n: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_isnumber>
    pub fn lua_isnumber(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_isstring>
    pub fn lua_isstring(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_iscfunction>
    pub fn lua_iscfunction(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_isuserdata>
    pub fn lua_isuserdata(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_type>
    pub fn lua_type(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_typename>
    pub fn lua_typename(L: *mut lua_State, tp: libc::c_int) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_tonumberx>
    pub fn lua_tonumberx(
        L: *mut lua_State,
        idx: libc::c_int,
        isnum: *mut libc::c_int,
    ) -> lua_Number;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_tointegerx>
    pub fn lua_tointegerx(
        L: *mut lua_State,
        idx: libc::c_int,
        isnum: *mut libc::c_int,
    ) -> lua_Integer;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_tounsignedx>
    pub fn lua_tounsignedx(
        L: *mut lua_State,
        idx: libc::c_int,
        isnum: *mut libc::c_int,
    ) -> lua_Unsigned;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_toboolean>
    pub fn lua_toboolean(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_tolstring>
    pub fn lua_tolstring(
        L: *mut lua_State,
        idx: libc::c_int,
        len: *mut usize,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_rawlen>
    pub fn lua_rawlen(L: *mut lua_State, idx: libc::c_int) -> usize;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_tocfunction>
    pub fn lua_tocfunction(L: *mut lua_State, idx: libc::c_int) -> lua_CFunction;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_touserdata>
    pub fn lua_touserdata(L: *mut lua_State, idx: libc::c_int) -> *mut libc::c_void;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_tothread>
    pub fn lua_tothread(L: *mut lua_State, idx: libc::c_int) -> *mut lua_State;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_topointer>
    pub fn lua_topointer(L: *mut lua_State, idx: libc::c_int) -> *const libc::c_void;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_arith>
    pub fn lua_arith(L: *mut lua_State, op: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_rawequal>
    pub fn lua_rawequal(L: *mut lua_State, idx1: libc::c_int, idx2: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_compare>
    pub fn lua_compare(
        L: *mut lua_State,
        idx1: libc::c_int,
        idx2: libc::c_int,
        op: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushnil>
    pub fn lua_pushnil(L: *mut lua_State);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushnumber>
    pub fn lua_pushnumber(L: *mut lua_State, n: lua_Number);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushinteger>
    pub fn lua_pushinteger(L: *mut lua_State, n: lua_Integer);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushunsigned>
    pub fn lua_pushunsigned(L: *mut lua_State, n: lua_Unsigned);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushlstring>
    pub fn lua_pushlstring(
        L: *mut lua_State,
        s: *const libc::c_char,
        l: usize,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushstring>
    pub fn lua_pushstring(L: *mut lua_State, s: *const libc::c_char) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushvfstring>
    pub fn lua_pushvfstring(
        L: *mut lua_State,
        fmt: *const libc::c_char,
        argp: va_list,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushfstring>
    pub fn lua_pushfstring(L: *mut lua_State, fmt: *const libc::c_char, ...)
        -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushcclosure>
    pub fn lua_pushcclosure(L: *mut lua_State, fn_: lua_CFunction, n: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushboolean>
    pub fn lua_pushboolean(L: *mut lua_State, b: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushlightuserdata>
    pub fn lua_pushlightuserdata(L: *mut lua_State, p: *mut libc::c_void);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pushthread>
    pub fn lua_pushthread(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getglobal>
    pub fn lua_getglobal(L: *mut lua_State, var: *const libc::c_char);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_gettable>
    pub fn lua_gettable(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getfield>
    pub fn lua_getfield(L: *mut lua_State, idx: libc::c_int, k: *const libc::c_char);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_rawget>
    pub fn lua_rawget(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_rawgeti>
    pub fn lua_rawgeti(L: *mut lua_State, idx: libc::c_int, n: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_rawgetp>
    pub fn lua_rawgetp(L: *mut lua_State, idx: libc::c_int, p: *const libc::c_void);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_createtable>
    pub fn lua_createtable(L: *mut lua_State, narr: libc::c_int, nrec: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_newuserdata>
    pub fn lua_newuserdata(L: *mut lua_State, sz: usize) -> *mut libc::c_void;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getmetatable>
    pub fn lua_getmetatable(L: *mut lua_State, objindex: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getuservalue>
    pub fn lua_getuservalue(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_setglobal>
    pub fn lua_setglobal(L: *mut lua_State, var: *const libc::c_char);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_settable>
    pub fn lua_settable(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_setfield>
    pub fn lua_setfield(L: *mut lua_State, idx: libc::c_int, k: *const libc::c_char);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_rawset>
    pub fn lua_rawset(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_rawseti>
    pub fn lua_rawseti(L: *mut lua_State, idx: libc::c_int, n: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_rawsetp>
    pub fn lua_rawsetp(L: *mut lua_State, idx: libc::c_int, p: *const libc::c_void);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_setmetatable>
    pub fn lua_setmetatable(L: *mut lua_State, objindex: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_setuservalue>
    pub fn lua_setuservalue(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_callk>
    pub fn lua_callk(
        L: *mut lua_State,
        nargs: libc::c_int,
        nresults: libc::c_int,
        ctx: libc::c_int,
        k: lua_CFunction,
    );
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getctx>
    pub fn lua_getctx(L: *mut lua_State, ctx: *mut libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_pcallk>
    pub fn lua_pcallk(
        L: *mut lua_State,
        nargs: libc::c_int,
        nresults: libc::c_int,
        errfunc: libc::c_int,
        ctx: libc::c_int,
        k: lua_CFunction,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_load>
    pub fn lua_load(
        L: *mut lua_State,
        reader: lua_Reader,
        dt: *mut libc::c_void,
        chunkname: *const libc::c_char,
        mode: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_dump>
    pub fn lua_dump(L: *mut lua_State, writer: lua_Writer, data: *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_yieldk>
    pub fn lua_yieldk(
        L: *mut lua_State,
        nresults: libc::c_int,
        ctx: libc::c_int,
        k: lua_CFunction,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_resume>
    pub fn lua_resume(L: *mut lua_State, from: *mut lua_State, narg: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_status>
    pub fn lua_status(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_gc>
    pub fn lua_gc(L: *mut lua_State, what: libc::c_int, data: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_error>
    pub fn lua_error(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_next>
    pub fn lua_next(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_concat>
    pub fn lua_concat(L: *mut lua_State, n: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_len>
    pub fn lua_len(L: *mut lua_State, idx: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getallocf>
    pub fn lua_getallocf(L: *mut lua_State, ud: *mut *mut libc::c_void) -> lua_Alloc;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_setallocf>
    pub fn lua_setallocf(L: *mut lua_State, f: lua_Alloc, ud: *mut libc::c_void);
}
/// <https://www.lua.org/manual/5.1/manual.html#lua_Hook >
pub type lua_Hook =
    ::core::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>;
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getstack>
    pub fn lua_getstack(L: *mut lua_State, level: libc::c_int, ar: *mut lua_Debug) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getinfo>
    pub fn lua_getinfo(
        L: *mut lua_State,
        what: *const libc::c_char,
        ar: *mut lua_Debug,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getlocal>
    pub fn lua_getlocal(
        L: *mut lua_State,
        ar: *const lua_Debug,
        n: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_setlocal>
    pub fn lua_setlocal(
        L: *mut lua_State,
        ar: *const lua_Debug,
        n: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_getupvalue>
    pub fn lua_getupvalue(
        L: *mut lua_State,
        funcindex: libc::c_int,
        n: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_setupvalue>
    pub fn lua_setupvalue(
        L: *mut lua_State,
        funcindex: libc::c_int,
        n: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_upvalueid>
    pub fn lua_upvalueid(L: *mut lua_State, fidx: libc::c_int, n: libc::c_int)
        -> *mut libc::c_void;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_upvaluejoin>
    pub fn lua_upvaluejoin(
        L: *mut lua_State,
        fidx1: libc::c_int,
        n1: libc::c_int,
        fidx2: libc::c_int,
        n2: libc::c_int,
    );
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_sethook>
    pub fn lua_sethook(
        L: *mut lua_State,
        func: lua_Hook,
        mask: libc::c_int,
        count: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_gethook>
    pub fn lua_gethook(L: *mut lua_State) -> lua_Hook;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_gethookmask>
    pub fn lua_gethookmask(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#lua_gethookcount>
    pub fn lua_gethookcount(L: *mut lua_State) -> libc::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
/// <https://www.lua.org/manual/5.1/manual.html#lua_Debug >
pub struct lua_Debug {
    pub event: libc::c_int,
    pub name: *const libc::c_char,
    pub namewhat: *const libc::c_char,
    pub what: *const libc::c_char,
    pub source: *const libc::c_char,
    pub currentline: libc::c_int,
    pub linedefined: libc::c_int,
    pub lastlinedefined: libc::c_int,
    pub nups: libc::c_uchar,
    pub nparams: libc::c_uchar,
    pub isvararg: libc::c_char,
    pub istailcall: libc::c_char,
    pub short_src: [libc::c_char; 60usize],
    pub i_ci: *mut CallInfo,
}
#[test]
fn bindgen_test_layout_lua_Debug() {
    assert_eq!(
        ::core::mem::size_of::<lua_Debug>(),
        128usize,
        concat!("Size of: ", stringify!(lua_Debug))
    );
    assert_eq!(
        ::core::mem::align_of::<lua_Debug>(),
        8usize,
        concat!("Alignment of ", stringify!(lua_Debug))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).namewhat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(namewhat)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).what as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(what)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).source as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).currentline as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(currentline)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).linedefined as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(linedefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).lastlinedefined as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(lastlinedefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).nups as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(nups)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).nparams as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(nparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).isvararg as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(isvararg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).istailcall as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(istailcall)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).short_src as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(short_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lua_Debug>())).i_ci as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(i_ci)
        )
    );
}
impl ::core::fmt::Debug for lua_Debug {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "lua_Debug {{ event: {:?}, name: {:?}, namewhat: {:?}, what: {:?}, source: {:?}, currentline: {:?}, linedefined: {:?}, lastlinedefined: {:?}, nups: {:?}, nparams: {:?}, isvararg: {:?}, istailcall: {:?}, short_src: [...], i_ci: {:?} }}" , self . event , self . name , self . namewhat , self . what , self . source , self . currentline , self . linedefined , self . lastlinedefined , self . nups , self . nparams , self . isvararg , self . istailcall , self . i_ci)
    }
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_base>
    pub fn luaopen_base(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_coroutine>
    pub fn luaopen_coroutine(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_table>
    pub fn luaopen_table(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_io>
    pub fn luaopen_io(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_os>
    pub fn luaopen_os(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_string>
    pub fn luaopen_string(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_bit32>
    pub fn luaopen_bit32(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_math>
    pub fn luaopen_math(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_debug>
    pub fn luaopen_debug(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaopen_package>
    pub fn luaopen_package(L: *mut lua_State) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_openlibs>
    pub fn luaL_openlibs(L: *mut lua_State);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::core::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::core::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
/// <https://www.lua.org/manual/5.1/manual.html#luaL_Reg >
pub struct luaL_Reg {
    pub name: *const libc::c_char,
    pub func: lua_CFunction,
}
#[test]
fn bindgen_test_layout_luaL_Reg() {
    assert_eq!(
        ::core::mem::size_of::<luaL_Reg>(),
        16usize,
        concat!("Size of: ", stringify!(luaL_Reg))
    );
    assert_eq!(
        ::core::mem::align_of::<luaL_Reg>(),
        8usize,
        concat!("Alignment of ", stringify!(luaL_Reg))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<luaL_Reg>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Reg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<luaL_Reg>())).func as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Reg),
            "::",
            stringify!(func)
        )
    );
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checkversion_>
    pub fn luaL_checkversion_(L: *mut lua_State, ver: lua_Number);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_getmetafield>
    pub fn luaL_getmetafield(
        L: *mut lua_State,
        obj: libc::c_int,
        e: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_callmeta>
    pub fn luaL_callmeta(
        L: *mut lua_State,
        obj: libc::c_int,
        e: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_tolstring>
    pub fn luaL_tolstring(
        L: *mut lua_State,
        idx: libc::c_int,
        len: *mut usize,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_argerror>
    pub fn luaL_argerror(
        L: *mut lua_State,
        numarg: libc::c_int,
        extramsg: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checklstring>
    pub fn luaL_checklstring(
        L: *mut lua_State,
        numArg: libc::c_int,
        l: *mut usize,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_optlstring>
    pub fn luaL_optlstring(
        L: *mut lua_State,
        numArg: libc::c_int,
        def: *const libc::c_char,
        l: *mut usize,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checknumber>
    pub fn luaL_checknumber(L: *mut lua_State, numArg: libc::c_int) -> lua_Number;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_optnumber>
    pub fn luaL_optnumber(L: *mut lua_State, nArg: libc::c_int, def: lua_Number) -> lua_Number;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checkinteger>
    pub fn luaL_checkinteger(L: *mut lua_State, numArg: libc::c_int) -> lua_Integer;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_optinteger>
    pub fn luaL_optinteger(L: *mut lua_State, nArg: libc::c_int, def: lua_Integer) -> lua_Integer;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checkunsigned>
    pub fn luaL_checkunsigned(L: *mut lua_State, numArg: libc::c_int) -> lua_Unsigned;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_optunsigned>
    pub fn luaL_optunsigned(
        L: *mut lua_State,
        numArg: libc::c_int,
        def: lua_Unsigned,
    ) -> lua_Unsigned;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checkstack>
    pub fn luaL_checkstack(L: *mut lua_State, sz: libc::c_int, msg: *const libc::c_char);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checktype>
    pub fn luaL_checktype(L: *mut lua_State, narg: libc::c_int, t: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checkany>
    pub fn luaL_checkany(L: *mut lua_State, narg: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_newmetatable>
    pub fn luaL_newmetatable(L: *mut lua_State, tname: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_setmetatable>
    pub fn luaL_setmetatable(L: *mut lua_State, tname: *const libc::c_char);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_testudata>
    pub fn luaL_testudata(
        L: *mut lua_State,
        ud: libc::c_int,
        tname: *const libc::c_char,
    ) -> *mut libc::c_void;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checkudata>
    pub fn luaL_checkudata(
        L: *mut lua_State,
        ud: libc::c_int,
        tname: *const libc::c_char,
    ) -> *mut libc::c_void;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_where>
    pub fn luaL_where(L: *mut lua_State, lvl: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_error>
    pub fn luaL_error(L: *mut lua_State, fmt: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_checkoption>
    pub fn luaL_checkoption(
        L: *mut lua_State,
        narg: libc::c_int,
        def: *const libc::c_char,
        lst: *const *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_fileresult>
    pub fn luaL_fileresult(
        L: *mut lua_State,
        stat: libc::c_int,
        fname: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_execresult>
    pub fn luaL_execresult(L: *mut lua_State, stat: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_ref>
    pub fn luaL_ref(L: *mut lua_State, t: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_unref>
    pub fn luaL_unref(L: *mut lua_State, t: libc::c_int, ref_: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_loadfilex>
    pub fn luaL_loadfilex(
        L: *mut lua_State,
        filename: *const libc::c_char,
        mode: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_loadbufferx>
    pub fn luaL_loadbufferx(
        L: *mut lua_State,
        buff: *const libc::c_char,
        sz: usize,
        name: *const libc::c_char,
        mode: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_loadstring>
    pub fn luaL_loadstring(L: *mut lua_State, s: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_newstate>
    pub fn luaL_newstate() -> *mut lua_State;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_len>
    pub fn luaL_len(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_gsub>
    pub fn luaL_gsub(
        L: *mut lua_State,
        s: *const libc::c_char,
        p: *const libc::c_char,
        r: *const libc::c_char,
    ) -> *const libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_setfuncs>
    pub fn luaL_setfuncs(L: *mut lua_State, l: *const luaL_Reg, nup: libc::c_int);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_getsubtable>
    pub fn luaL_getsubtable(
        L: *mut lua_State,
        idx: libc::c_int,
        fname: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_traceback>
    pub fn luaL_traceback(
        L: *mut lua_State,
        L1: *mut lua_State,
        msg: *const libc::c_char,
        level: libc::c_int,
    );
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_requiref>
    pub fn luaL_requiref(
        L: *mut lua_State,
        modname: *const libc::c_char,
        openf: lua_CFunction,
        glb: libc::c_int,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
/// <https://www.lua.org/manual/5.1/manual.html#luaL_Buffer >
pub struct luaL_Buffer {
    pub b: *mut libc::c_char,
    pub size: usize,
    pub n: usize,
    pub L: *mut lua_State,
    pub initb: [libc::c_char; 512usize],
}
#[test]
fn bindgen_test_layout_luaL_Buffer() {
    assert_eq!(
        ::core::mem::size_of::<luaL_Buffer>(),
        544usize,
        concat!("Size of: ", stringify!(luaL_Buffer))
    );
    assert_eq!(
        ::core::mem::align_of::<luaL_Buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(luaL_Buffer))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<luaL_Buffer>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<luaL_Buffer>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<luaL_Buffer>())).n as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<luaL_Buffer>())).L as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<luaL_Buffer>())).initb as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(initb)
        )
    );
}
impl ::core::fmt::Debug for luaL_Buffer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "luaL_Buffer {{ b: {:?}, size: {:?}, n: {:?}, L: {:?}, initb: [...] }}",
            self.b, self.size, self.n, self.L
        )
    }
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_buffinit>
    pub fn luaL_buffinit(L: *mut lua_State, B: *mut luaL_Buffer);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_prepbuffsize>
    pub fn luaL_prepbuffsize(B: *mut luaL_Buffer, sz: usize) -> *mut libc::c_char;
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_addlstring>
    pub fn luaL_addlstring(B: *mut luaL_Buffer, s: *const libc::c_char, l: usize);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_addstring>
    pub fn luaL_addstring(B: *mut luaL_Buffer, s: *const libc::c_char);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_addvalue>
    pub fn luaL_addvalue(B: *mut luaL_Buffer);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_pushresult>
    pub fn luaL_pushresult(B: *mut luaL_Buffer);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_pushresultsize>
    pub fn luaL_pushresultsize(B: *mut luaL_Buffer, sz: usize);
}
extern "C" {
    /// <https://www.lua.org/manual/5.1/manual.html#luaL_buffinitsize>
    pub fn luaL_buffinitsize(
        L: *mut lua_State,
        B: *mut luaL_Buffer,
        sz: usize,
    ) -> *mut libc::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
/// <https://www.lua.org/manual/5.1/manual.html#luaL_Stream >
pub struct luaL_Stream {
    pub f: *mut FILE,
    pub closef: lua_CFunction,
}
#[test]
fn bindgen_test_layout_luaL_Stream() {
    assert_eq!(
        ::core::mem::size_of::<luaL_Stream>(),
        16usize,
        concat!("Size of: ", stringify!(luaL_Stream))
    );
    assert_eq!(
        ::core::mem::align_of::<luaL_Stream>(),
        8usize,
        concat!("Alignment of ", stringify!(luaL_Stream))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<luaL_Stream>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Stream),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<luaL_Stream>())).closef as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Stream),
            "::",
            stringify!(closef)
        )
    );
}
pub type __builtin_va_list = *mut libc::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallInfo {
    pub _address: u8,
}
